{"ast":null,"code":"var _jsxFileName = \"/Users/kji/Project/Gitlab/mental-health-care/web/src/components/map/MapContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nlet infowindow = new kakao.maps.InfoWindow({\n  zIndex: 1\n});\nlet lat = \"\";\nlet lon = \"\"; // let markers = [];\n\nconst MapContainer = ({\n  searchPlace\n}) => {\n  _s();\n\n  const [gps, setGps] = useState([]);\n  const [map, setMap] = useState({});\n  const [marker, setMarker] = useState({}); //마커\n\n  const [markers, setMarkers] = useState([]); //마커 저장 배열\n\n  function getGPS() {\n    const userLocation = [];\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        lat = position.coords.latitude; // 위도\n\n        lon = position.coords.longitude; // 경도\n\n        const container = document.getElementById(\"map1\");\n        const options = {\n          center: new kakao.maps.LatLng(lat, lon),\n          level: 3\n        };\n        userLocation.push(lat);\n        userLocation.push(lon);\n        console.log(userLocation);\n        setGps(userLocation);\n        setMap(new kakao.maps.Map(container, options));\n      });\n    }\n  }\n\n  useEffect(() => {\n    getGPS();\n  }, []);\n  console.log(gps);\n\n  function deleteMarkers() {\n    markers.map(function (marker) {\n      marker.setMap(null);\n    });\n    setMarkers([]); //배열초기화\n\n    console.log(setMarkers([]));\n  }\n\n  function placesSearchCB(data, status, pagination) {\n    let marker_temp = [];\n\n    if (status === kakao.maps.services.Status.OK) {\n      let bounds = new kakao.maps.LatLngBounds();\n\n      for (let i = 0; i < data.length; i++) {\n        marker_temp.push(markers);\n        setMarkers(marker_temp); //얘는 위에서 호출했는데 또 해야하나?\n\n        console.log(markers);\n        displayMarker(data[i]);\n        bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n      }\n\n      map.setBounds(bounds);\n    }\n  }\n\n  function displayMarker(place) {\n    setMarker(new kakao.maps.Marker({\n      map: map,\n      position: new kakao.maps.LatLng(place.y, place.x),\n      image: new kakao.maps.MarkerImage(\"https://cdn3.iconfinder.com/data/icons/flat-pro-basic-set-1-1/32/location-blue-256.png\", new kakao.maps.Size(31, 35), {\n        offset: new kakao.maps.Point(16, 34),\n        alt: \"마커 이미지\"\n      })\n    }));\n    kakao.maps.event.addListener(marker, \"mouseover\", function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출\n      infowindow.setContent(`\n        <div class=\"info\" >\n        <h6>\n        ${place.place_name}\n        </h6>\n        <span>${place.road_address_name}\n        </span></br>\n        <span class=\"jibun gray\"> \n          ${place.address_name}\n        </span></br>\n        <span class=\"tel\">${place.phone}\n        </span>\n        </div>\n        `);\n      infowindow.open(map, marker);\n    });\n    kakao.maps.event.addListener(marker, \"mouseout\", function () {\n      infowindow.close();\n    });\n  }\n\n  useEffect(() => {\n    deleteMarkers(map);\n  }, [input]);\n  useEffect(() => {\n    if (gps != [] && map != {} && searchPlace) {\n      const ps = new kakao.maps.services.Places();\n      ps.keywordSearch(searchPlace, placesSearchCB, {\n        location: new kakao.maps.LatLng(gps[0], gps[1]),\n        bounds: new kakao.maps.LatLngBounds(new kakao.maps.LatLng(gps[0] - 0.1, gps[1] - 0.1), new kakao.maps.LatLng(gps[0] + 0.1, gps[1] + 0.1)),\n        radius: 10000\n      });\n    }\n  }, [map, gps, searchPlace]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map1\",\n    style: {\n      width: \"400px\",\n      height: \"300px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapContainer, \"SuMgWY+zTAGhuJd8RWpN8zCbW2A=\");\n\n_c = MapContainer;\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/kji/Project/Gitlab/mental-health-care/web/src/components/map/MapContainer.js"],"names":["React","useEffect","useState","kakao","window","infowindow","maps","InfoWindow","zIndex","lat","lon","MapContainer","searchPlace","gps","setGps","map","setMap","marker","setMarker","markers","setMarkers","getGPS","userLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","container","document","getElementById","options","center","LatLng","level","push","console","log","Map","deleteMarkers","placesSearchCB","data","status","pagination","marker_temp","services","Status","OK","bounds","LatLngBounds","i","length","displayMarker","extend","y","x","setBounds","place","Marker","image","MarkerImage","Size","offset","Point","alt","event","addListener","setContent","place_name","road_address_name","address_name","phone","open","close","input","ps","Places","keywordSearch","location","radius","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./map.css\";\nconst { kakao } = window;\nlet infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\nlet lat = \"\";\nlet lon = \"\";\n// let markers = [];\nconst MapContainer = ({ searchPlace }) => {\n  const [gps, setGps] = useState([]);\n  const [map, setMap] = useState({});\n  const [marker, setMarker] = useState({}); //마커\n  const [markers, setMarkers] = useState([]); //마커 저장 배열\n\n  function getGPS() {\n    const userLocation = [];\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        lat = position.coords.latitude; // 위도\n        lon = position.coords.longitude; // 경도\n        const container = document.getElementById(\"map1\");\n        const options = {\n          center: new kakao.maps.LatLng(lat, lon),\n          level: 3,\n        };\n        userLocation.push(lat);\n        userLocation.push(lon);\n        console.log(userLocation);\n        setGps(userLocation);\n\n        setMap(new kakao.maps.Map(container, options));\n      });\n    }\n  }\n\n  useEffect(() => {\n    getGPS();\n  }, []);\n  console.log(gps);\n  function deleteMarkers() {\n    markers.map(function (marker) {\n      marker.setMap(null);\n    });\n    setMarkers([]); //배열초기화\n    console.log(setMarkers([]));\n  }\n\n  function placesSearchCB(data, status, pagination) {\n    let marker_temp = [];\n    if (status === kakao.maps.services.Status.OK) {\n      let bounds = new kakao.maps.LatLngBounds();\n\n      for (let i = 0; i < data.length; i++) {\n        marker_temp.push(markers);\n        setMarkers(marker_temp); //얘는 위에서 호출했는데 또 해야하나?\n        console.log(markers);\n        displayMarker(data[i]);\n        bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n      }\n\n      map.setBounds(bounds);\n    }\n  }\n\n  function displayMarker(place) {\n    setMarker(\n      new kakao.maps.Marker({\n        map: map,\n        position: new kakao.maps.LatLng(place.y, place.x),\n        image: new kakao.maps.MarkerImage(\n          \"https://cdn3.iconfinder.com/data/icons/flat-pro-basic-set-1-1/32/location-blue-256.png\",\n          new kakao.maps.Size(31, 35),\n          {\n            offset: new kakao.maps.Point(16, 34),\n            alt: \"마커 이미지\",\n          }\n        ),\n      })\n    );\n\n    kakao.maps.event.addListener(marker, \"mouseover\", function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출\n      infowindow.setContent(\n        `\n        <div class=\"info\" >\n        <h6>\n        ${place.place_name}\n        </h6>\n        <span>${place.road_address_name}\n        </span></br>\n        <span class=\"jibun gray\"> \n          ${place.address_name}\n        </span></br>\n        <span class=\"tel\">${place.phone}\n        </span>\n        </div>\n        `\n      );\n      infowindow.open(map, marker);\n    });\n    kakao.maps.event.addListener(marker, \"mouseout\", function () {\n      infowindow.close();\n    });\n  }\n  useEffect(() => {\n    deleteMarkers(map);\n  }, [input]);\n  useEffect(() => {\n    if (gps != [] && map != {} && searchPlace) {\n      const ps = new kakao.maps.services.Places();\n      ps.keywordSearch(searchPlace, placesSearchCB, {\n        location: new kakao.maps.LatLng(gps[0], gps[1]),\n        bounds: new kakao.maps.LatLngBounds(\n          new kakao.maps.LatLng(gps[0] - 0.1, gps[1] - 0.1),\n          new kakao.maps.LatLng(gps[0] + 0.1, gps[1] + 0.1)\n        ),\n        radius: 10000,\n      });\n    }\n  }, [map, gps, searchPlace]);\n\n  return (\n    <div\n      id=\"map1\"\n      style={{\n        width: \"400px\",\n        height: \"300px\",\n      }}\n    ></div>\n  );\n};\n\nexport default MapContainer;\n"]},"metadata":{},"sourceType":"module"}