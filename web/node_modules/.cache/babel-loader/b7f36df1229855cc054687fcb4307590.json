{"ast":null,"code":"var _jsxFileName = \"/Users/kji/Project/Gitlab/mental-health-care/web/src/components/data_visualization/StackedBarChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport { select, scaleBand, axisBottom, stack, max, scaleLinear, axisLeft, stackOrderAscending } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n/**\n * Component that renders a StackedBarChart\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StackedBarChart({\n  data,\n  keys,\n  colors\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const {\n      width,\n      height\n    } = dimensions || wrapperRef.current.getBoundingClientRect(); // stacks / layers\n\n    const stackGenerator = stack().keys(keys).order(stackOrderAscending);\n    const layers = stackGenerator(data);\n    const extent = [0, 50 // max(layers, layer => max(layer, sequence => sequence[1]))\n    ]; // scales\n\n    const xScale = scaleBand().domain(data.map(d => d.year)).range([0, width]).padding(0.25);\n    const yScale = scaleLinear().domain(extent).range([height, 0]); // rendering\n\n    svg.selectAll(\".layer\").data(layers).join(\"g\").attr(\"class\", \"layer\").attr(\"fill\", layer => colors[layer.key]).selectAll(\"rect\").data(layer => layer).join(\"rect\").attr(\"x\", sequence => xScale(sequence.data.year)).attr(\"width\", xScale.bandwidth()).attr(\"y\", sequence => yScale(sequence[1])).attr(\"height\", sequence => yScale(sequence[0]) - yScale(sequence[1])); // axes\n\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n    const yAxis = axisLeft(yScale);\n    svg.select(\".y-axis\").call(yAxis);\n  }, [colors, data, dimensions, keys]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wrapperRef,\n      style: {\n        marginBottom: \"2rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"y-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StackedBarChart, \"6bFCyBd3HKwDD6FYD4wxcBmp2CY=\", false, function () {\n  return [useResizeObserver];\n});\n\n_c = StackedBarChart;\nexport default StackedBarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"StackedBarChart\");","map":{"version":3,"sources":["/Users/kji/Project/Gitlab/mental-health-care/web/src/components/data_visualization/StackedBarChart.js"],"names":["React","useEffect","useRef","select","scaleBand","axisBottom","stack","max","scaleLinear","axisLeft","stackOrderAscending","useResizeObserver","StackedBarChart","data","keys","colors","svgRef","wrapperRef","dimensions","svg","current","width","height","getBoundingClientRect","stackGenerator","order","layers","extent","xScale","domain","map","d","year","range","padding","yScale","selectAll","join","attr","layer","key","sequence","bandwidth","xAxis","call","yAxis","marginBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport {\n  select,\n  scaleBand,\n  axisBottom,\n  stack,\n  max,\n  scaleLinear,\n  axisLeft,\n  stackOrderAscending\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a StackedBarChart\n */\n\nfunction StackedBarChart({ data, keys, colors }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // stacks / layers\n    const stackGenerator = stack()\n      .keys(keys)\n      .order(stackOrderAscending);\n    const layers = stackGenerator(data);\n    const extent = [\n      0,\n      50\n      // max(layers, layer => max(layer, sequence => sequence[1]))\n    ];\n\n    // scales\n    const xScale = scaleBand()\n      .domain(data.map(d => d.year))\n      .range([0, width])\n      .padding(0.25);\n\n    const yScale = scaleLinear()\n      .domain(extent)\n      .range([height, 0]);\n\n    // rendering\n    svg\n      .selectAll(\".layer\")\n      .data(layers)\n      .join(\"g\")\n      .attr(\"class\", \"layer\")\n      .attr(\"fill\", layer => colors[layer.key])\n      .selectAll(\"rect\")\n      .data(layer => layer)\n      .join(\"rect\")\n      .attr(\"x\", sequence => xScale(sequence.data.year))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"y\", sequence => yScale(sequence[1]))\n      .attr(\"height\", sequence => yScale(sequence[0]) - yScale(sequence[1]));\n\n    // axes\n    const xAxis = axisBottom(xScale);\n    svg\n      .select(\".x-axis\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(xAxis);\n\n    const yAxis = axisLeft(yScale);\n    svg.select(\".y-axis\").call(yAxis);\n  }, [colors, data, dimensions, keys]);\n\n  return (\n    <React.Fragment>\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n        <svg ref={svgRef}>\n          <g className=\"x-axis\" />\n          <g className=\"y-axis\" />\n        </svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StackedBarChart;\n"]},"metadata":{},"sourceType":"module"}