{"ast":null,"code":"var _jsxFileName = \"/Users/kji/Project/Gitlab/mental-health-care/web/src/components/map/MapContainer2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nlet infowindow = new kakao.maps.InfoWindow({\n  zIndex: 1\n});\nlet lat = \"\";\nlet lon = \"\";\n\nconst MapContainer = ({\n  searchPlace\n}) => {\n  _s();\n\n  const [gps, setGps] = useState([]);\n  const [map, setMap] = useState({});\n  const [markers, setMarkers] = useState([]); //마커 저장 배열\n\n  function getGPS() {\n    const userLocation = [];\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        lat = position.coords.latitude; // 위도\n\n        lon = position.coords.longitude; // 경도\n\n        const container = document.getElementById(\"map1\");\n        const options = {\n          center: new kakao.maps.LatLng(lat, lon),\n          level: 3\n        };\n        userLocation.push(lat);\n        userLocation.push(lon);\n        setGps(userLocation);\n        setMap(new kakao.maps.Map(container, options));\n      });\n    }\n  }\n\n  useEffect(() => {\n    getGPS();\n  }, []);\n\n  function placesSearchCB(data, status, pagination) {\n    let marker_temp = [];\n\n    if (markers != []) {\n      markers.map(function (m) {\n        m.setMap(null);\n      });\n    }\n\n    if (status === kakao.maps.services.Status.OK) {\n      let bounds = new kakao.maps.LatLngBounds();\n      data.map(function (d) {\n        let marker = new kakao.maps.Marker({\n          map: map,\n          position: new kakao.maps.LatLng(d.y, d.x),\n          image: new kakao.maps.MarkerImage(\"https://cdn3.iconfinder.com/data/icons/flat-pro-basic-set-1-1/32/location-blue-256.png\", new kakao.maps.Size(31, 35), {\n            offset: new kakao.maps.Point(16, 34),\n            alt: \"마커 이미지\"\n          })\n        });\n        marker_temp.push(marker);\n        displayMarker(d, marker);\n        bounds.extend(new kakao.maps.LatLng(d.y, d.x));\n      });\n\n      for (let i = 0; i < data.length; i++) {}\n\n      setMarkers(marker_temp);\n      map.setBounds(bounds);\n    }\n  }\n\n  useEffect(() => {\n    console.log(markers);\n  }, [markers]);\n\n  function displayMarker(place, marker) {\n    kakao.maps.event.addListener(marker, \"mouseover\", function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출\n      infowindow.setContent(`\n        <div class=\"info\" >\n        <h6>\n        ${place.place_name}\n        </h6>\n        <span>${place.road_address_name}\n        </span></br>\n        <span class=\"jibun gray\"> \n          ${place.address_name}\n        </span></br>\n        <span class=\"tel\">${place.phone}\n        </span>\n        </div>\n        `);\n      infowindow.open(map, marker);\n    });\n    kakao.maps.event.addListener(marker, \"mouseout\", function () {\n      infowindow.close();\n    });\n  }\n\n  useEffect(() => {\n    if (gps != [] && map != {} && searchPlace) {\n      const ps = new kakao.maps.services.Places();\n      ps.keywordSearch(searchPlace, placesSearchCB, {\n        location: new kakao.maps.LatLng(gps[0], gps[1]),\n        bounds: new kakao.maps.LatLngBounds(new kakao.maps.LatLng(gps[0] - 0.1, gps[1] - 0.1), new kakao.maps.LatLng(gps[0] + 0.1, gps[1] + 0.1)),\n        radius: 10000\n      });\n    }\n  }, [map, gps, searchPlace]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map1\",\n    style: {\n      width: \"400px\",\n      height: \"300px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapContainer, \"2AKjWdZ40l0V7i94ZkJeeWcsrMg=\");\n\n_c = MapContainer;\nexport default MapContainer2;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/kji/Project/Gitlab/mental-health-care/web/src/components/map/MapContainer2.js"],"names":["React","useEffect","useState","kakao","window","infowindow","maps","InfoWindow","zIndex","lat","lon","MapContainer","searchPlace","gps","setGps","map","setMap","markers","setMarkers","getGPS","userLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","container","document","getElementById","options","center","LatLng","level","push","Map","placesSearchCB","data","status","pagination","marker_temp","m","services","Status","OK","bounds","LatLngBounds","d","marker","Marker","y","x","image","MarkerImage","Size","offset","Point","alt","displayMarker","extend","i","length","setBounds","console","log","place","event","addListener","setContent","place_name","road_address_name","address_name","phone","open","close","ps","Places","keywordSearch","location","radius","width","height","MapContainer2"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./map.css\";\nconst { kakao } = window;\nlet infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\nlet lat = \"\";\nlet lon = \"\";\n\nconst MapContainer = ({ searchPlace }) => {\n  const [gps, setGps] = useState([]);\n  const [map, setMap] = useState({});\n  const [markers, setMarkers] = useState([]); //마커 저장 배열\n\n  function getGPS() {\n    const userLocation = [];\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        lat = position.coords.latitude; // 위도\n        lon = position.coords.longitude; // 경도\n        const container = document.getElementById(\"map1\");\n        const options = {\n          center: new kakao.maps.LatLng(lat, lon),\n          level: 3,\n        };\n        userLocation.push(lat);\n        userLocation.push(lon);\n        setGps(userLocation);\n\n        setMap(new kakao.maps.Map(container, options));\n      });\n    }\n  }\n\n  useEffect(() => {\n    getGPS();\n  }, []);\n\n  function placesSearchCB(data, status, pagination) {\n    let marker_temp = [];\n    if (markers != []) {\n      markers.map(function (m) {\n        m.setMap(null);\n      });\n    }\n    if (status === kakao.maps.services.Status.OK) {\n      let bounds = new kakao.maps.LatLngBounds();\n\n      data.map(function (d) {\n        let marker = new kakao.maps.Marker({\n          map: map,\n          position: new kakao.maps.LatLng(d.y, d.x),\n          image: new kakao.maps.MarkerImage(\n            \"https://cdn3.iconfinder.com/data/icons/flat-pro-basic-set-1-1/32/location-blue-256.png\",\n            new kakao.maps.Size(31, 35),\n            {\n              offset: new kakao.maps.Point(16, 34),\n              alt: \"마커 이미지\",\n            }\n          ),\n        });\n        marker_temp.push(marker);\n        displayMarker(d, marker);\n        bounds.extend(new kakao.maps.LatLng(d.y, d.x));\n      });\n      for (let i = 0; i < data.length; i++) {}\n      setMarkers(marker_temp);\n      map.setBounds(bounds);\n    }\n  }\n  useEffect(() => {\n    console.log(markers);\n  }, [markers]);\n\n  function displayMarker(place, marker) {\n    kakao.maps.event.addListener(marker, \"mouseover\", function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출\n      infowindow.setContent(\n        `\n        <div class=\"info\" >\n        <h6>\n        ${place.place_name}\n        </h6>\n        <span>${place.road_address_name}\n        </span></br>\n        <span class=\"jibun gray\"> \n          ${place.address_name}\n        </span></br>\n        <span class=\"tel\">${place.phone}\n        </span>\n        </div>\n        `\n      );\n      infowindow.open(map, marker);\n    });\n    kakao.maps.event.addListener(marker, \"mouseout\", function () {\n      infowindow.close();\n    });\n  }\n\n  useEffect(() => {\n    if (gps != [] && map != {} && searchPlace) {\n      const ps = new kakao.maps.services.Places();\n      ps.keywordSearch(searchPlace, placesSearchCB, {\n        location: new kakao.maps.LatLng(gps[0], gps[1]),\n        bounds: new kakao.maps.LatLngBounds(\n          new kakao.maps.LatLng(gps[0] - 0.1, gps[1] - 0.1),\n          new kakao.maps.LatLng(gps[0] + 0.1, gps[1] + 0.1)\n        ),\n        radius: 10000,\n      });\n    }\n  }, [map, gps, searchPlace]);\n\n  return (\n    <div\n      id=\"map1\"\n      style={{\n        width: \"400px\",\n        height: \"300px\",\n      }}\n    ></div>\n  );\n};\n\nexport default MapContainer2;\n"]},"metadata":{},"sourceType":"module"}