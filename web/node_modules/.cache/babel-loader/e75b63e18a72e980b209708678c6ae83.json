{"ast":null,"code":"var _jsxFileName = \"/Users/kji/Project/Gitlab/mental-health-care/web/src/components/map/MapContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./map.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  kakao\n} = window;\nlet infowindow = new kakao.maps.InfoWindow({\n  zIndex: 1\n});\nlet lat = 37.5642135;\nlet lon = 127.0016985;\n\nconst MapContainer = ({\n  searchPlace\n}) => {\n  _s();\n\n  const [gps, setGps] = useState([]);\n  const [map, setMap] = useState({});\n\n  function getGPS() {\n    const userLocation = [];\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        lat = position.coords.latitude; // 위도\n\n        lon = position.coords.longitude; // 경도\n\n        console.log(\"hi\");\n        const container = document.getElementById(\"map1\");\n        const options = {\n          center: new kakao.maps.LatLng(lat, lon),\n          level: 3\n        };\n        console.log(options);\n        userLocation[0] = lat;\n        userLocation[1] = lon;\n        console.log(userLocation);\n        setGps(userLocation);\n        setMap(new kakao.maps.Map(container, options));\n      });\n    }\n  }\n\n  useEffect(() => {\n    getGPS();\n  }, []);\n  console.log(gps);\n\n  function placesSearchCB(data, status, pagination) {\n    if (status === kakao.maps.services.Status.OK) {\n      let bounds = new kakao.maps.LatLngBounds();\n\n      for (let i = 0; i < data.length; i++) {\n        displayMarker(data[i]);\n        bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n      }\n\n      map.setBounds(bounds);\n    }\n  }\n\n  function displayMarker(place) {\n    let marker = new kakao.maps.Marker({\n      map: map,\n      position: new kakao.maps.LatLng(place.y, place.x),\n      image: new kakao.maps.MarkerImage(\"https://cdn3.iconfinder.com/data/icons/flat-pro-basic-set-1-1/32/location-blue-256.png\", new kakao.maps.Size(31, 35), {\n        offset: new kakao.maps.Point(16, 34),\n        alt: \"마커 이미지\"\n      })\n    });\n    kakao.maps.event.addListener(marker, \"mouseover\", function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출\n      infowindow.setContent('<div class=\"info\" >' + \"   <h6>\" + place.place_name + \"</h6>\" + \"    <span>\" + place.road_address_name + \"</span>\" + \"</br>\" + '   <span class=\"jibun gray\">' + place.address_name + \"</span>\" + \"</br>\" + '  <span class=\"tel\">' + place.phone + \"</span>\" + \"</div>\");\n      infowindow.open(map, marker);\n    });\n    kakao.maps.event.addListener(marker, \"mouseout\", function () {\n      infowindow.close();\n    });\n  }\n\n  useEffect(() => {\n    if (gps != [] && map != {} && searchPlace) {\n      const ps = new kakao.maps.services.Places();\n      ps.keywordSearch(searchPlace, placesSearchCB, {\n        location: new kakao.maps.LatLng(gps[0], gps[1]),\n        bounds: new kakao.maps.LatLngBounds(new kakao.maps.LatLng(gps[0] - 0.1, gps[1] - 0.1), new kakao.maps.LatLng(gps[0] + 0.1, gps[1] + 0.1)),\n        radius: 10000\n      });\n    }\n  }, [map, gps, searchPlace]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map1\",\n    style: {\n      width: \"350px\",\n      height: \"350px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapContainer, \"IXNtgdZOhwEcxAt9Iube0rU91b4=\");\n\n_c = MapContainer;\nexport default MapContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"sources":["/Users/kji/Project/Gitlab/mental-health-care/web/src/components/map/MapContainer.js"],"names":["React","useEffect","useState","kakao","window","infowindow","maps","InfoWindow","zIndex","lat","lon","MapContainer","searchPlace","gps","setGps","map","setMap","getGPS","userLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","container","document","getElementById","options","center","LatLng","level","Map","placesSearchCB","data","status","pagination","services","Status","OK","bounds","LatLngBounds","i","length","displayMarker","extend","y","x","setBounds","place","marker","Marker","image","MarkerImage","Size","offset","Point","alt","event","addListener","setContent","place_name","road_address_name","address_name","phone","open","close","ps","Places","keywordSearch","location","radius","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYC,MAAlB;AACA,IAAIC,UAAU,GAAG,IAAIF,KAAK,CAACG,IAAN,CAAWC,UAAf,CAA0B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA1B,CAAjB;AACA,IAAIC,GAAG,GAAG,UAAV;AACA,IAAIC,GAAG,GAAG,WAAV;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAAA;;AACxC,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,EAAD,CAA9B;;AAEA,WAASe,MAAT,GAAkB;AAChB,UAAMC,YAAY,GAAG,EAArB;;AACA,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAUC,QAAV,EAAoB;AAC3Db,QAAAA,GAAG,GAAGa,QAAQ,CAACC,MAAT,CAAgBC,QAAtB,CAD2D,CAC3B;;AAChCd,QAAAA,GAAG,GAAGY,QAAQ,CAACC,MAAT,CAAgBE,SAAtB,CAF2D,CAE1B;;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,cAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAlB;AACA,cAAMC,OAAO,GAAG;AACdC,UAAAA,MAAM,EAAE,IAAI7B,KAAK,CAACG,IAAN,CAAW2B,MAAf,CAAsBxB,GAAtB,EAA2BC,GAA3B,CADM;AAEdwB,UAAAA,KAAK,EAAE;AAFO,SAAhB;AAIAR,QAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACAb,QAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBT,GAAlB;AACAS,QAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBR,GAAlB;AACAgB,QAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;AACAJ,QAAAA,MAAM,CAACI,YAAD,CAAN;AAEAF,QAAAA,MAAM,CAAC,IAAIb,KAAK,CAACG,IAAN,CAAW6B,GAAf,CAAmBP,SAAnB,EAA8BG,OAA9B,CAAD,CAAN;AACD,OAhBD;AAiBD;AACF;;AAED9B,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM;AACP,GAFQ,EAEN,EAFM,CAAT;AAGAS,EAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;;AAEA,WAASuB,cAAT,CAAwBC,IAAxB,EAA8BC,MAA9B,EAAsCC,UAAtC,EAAkD;AAChD,QAAID,MAAM,KAAKnC,KAAK,CAACG,IAAN,CAAWkC,QAAX,CAAoBC,MAApB,CAA2BC,EAA1C,EAA8C;AAC5C,UAAIC,MAAM,GAAG,IAAIxC,KAAK,CAACG,IAAN,CAAWsC,YAAf,EAAb;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACS,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCE,QAAAA,aAAa,CAACV,IAAI,CAACQ,CAAD,CAAL,CAAb;AACAF,QAAAA,MAAM,CAACK,MAAP,CAAc,IAAI7C,KAAK,CAACG,IAAN,CAAW2B,MAAf,CAAsBI,IAAI,CAACQ,CAAD,CAAJ,CAAQI,CAA9B,EAAiCZ,IAAI,CAACQ,CAAD,CAAJ,CAAQK,CAAzC,CAAd;AACD;;AAEDnC,MAAAA,GAAG,CAACoC,SAAJ,CAAcR,MAAd;AACD;AACF;;AAED,WAASI,aAAT,CAAuBK,KAAvB,EAA8B;AAC5B,QAAIC,MAAM,GAAG,IAAIlD,KAAK,CAACG,IAAN,CAAWgD,MAAf,CAAsB;AACjCvC,MAAAA,GAAG,EAAEA,GAD4B;AAEjCO,MAAAA,QAAQ,EAAE,IAAInB,KAAK,CAACG,IAAN,CAAW2B,MAAf,CAAsBmB,KAAK,CAACH,CAA5B,EAA+BG,KAAK,CAACF,CAArC,CAFuB;AAGjCK,MAAAA,KAAK,EAAE,IAAIpD,KAAK,CAACG,IAAN,CAAWkD,WAAf,CACL,wFADK,EAEL,IAAIrD,KAAK,CAACG,IAAN,CAAWmD,IAAf,CAAoB,EAApB,EAAwB,EAAxB,CAFK,EAGL;AACEC,QAAAA,MAAM,EAAE,IAAIvD,KAAK,CAACG,IAAN,CAAWqD,KAAf,CAAqB,EAArB,EAAyB,EAAzB,CADV;AAEEC,QAAAA,GAAG,EAAE;AAFP,OAHK;AAH0B,KAAtB,CAAb;AAaAzD,IAAAA,KAAK,CAACG,IAAN,CAAWuD,KAAX,CAAiBC,WAAjB,CAA6BT,MAA7B,EAAqC,WAArC,EAAkD,YAAY;AAC5D;AACAhD,MAAAA,UAAU,CAAC0D,UAAX,CACE,wBACE,SADF,GAEEX,KAAK,CAACY,UAFR,GAGE,OAHF,GAIE,YAJF,GAKEZ,KAAK,CAACa,iBALR,GAME,SANF,GAOE,OAPF,GAQE,8BARF,GASEb,KAAK,CAACc,YATR,GAUE,SAVF,GAWE,OAXF,GAYE,sBAZF,GAaEd,KAAK,CAACe,KAbR,GAcE,SAdF,GAeE,QAhBJ;AAkBA9D,MAAAA,UAAU,CAAC+D,IAAX,CAAgBrD,GAAhB,EAAqBsC,MAArB;AACD,KArBD;AAsBAlD,IAAAA,KAAK,CAACG,IAAN,CAAWuD,KAAX,CAAiBC,WAAjB,CAA6BT,MAA7B,EAAqC,UAArC,EAAiD,YAAY;AAC3DhD,MAAAA,UAAU,CAACgE,KAAX;AACD,KAFD;AAGD;;AAEDpE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,GAAG,IAAI,EAAP,IAAaE,GAAG,IAAI,EAApB,IAA0BH,WAA9B,EAA2C;AACzC,YAAM0D,EAAE,GAAG,IAAInE,KAAK,CAACG,IAAN,CAAWkC,QAAX,CAAoB+B,MAAxB,EAAX;AACAD,MAAAA,EAAE,CAACE,aAAH,CAAiB5D,WAAjB,EAA8BwB,cAA9B,EAA8C;AAC5CqC,QAAAA,QAAQ,EAAE,IAAItE,KAAK,CAACG,IAAN,CAAW2B,MAAf,CAAsBpB,GAAG,CAAC,CAAD,CAAzB,EAA8BA,GAAG,CAAC,CAAD,CAAjC,CADkC;AAE5C8B,QAAAA,MAAM,EAAE,IAAIxC,KAAK,CAACG,IAAN,CAAWsC,YAAf,CACN,IAAIzC,KAAK,CAACG,IAAN,CAAW2B,MAAf,CAAsBpB,GAAG,CAAC,CAAD,CAAH,GAAS,GAA/B,EAAoCA,GAAG,CAAC,CAAD,CAAH,GAAS,GAA7C,CADM,EAEN,IAAIV,KAAK,CAACG,IAAN,CAAW2B,MAAf,CAAsBpB,GAAG,CAAC,CAAD,CAAH,GAAS,GAA/B,EAAoCA,GAAG,CAAC,CAAD,CAAH,GAAS,GAA7C,CAFM,CAFoC;AAM5C6D,QAAAA,MAAM,EAAE;AANoC,OAA9C;AAQD;AACF,GAZQ,EAYN,CAAC3D,GAAD,EAAMF,GAAN,EAAWD,WAAX,CAZM,CAAT;AAcA,sBACE;AACE,IAAA,EAAE,EAAC,MADL;AAEE,IAAA,KAAK,EAAE;AACL+D,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,MAAM,EAAE;AAFH;AAFT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA7GD;;GAAMjE,Y;;KAAAA,Y;AA+GN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./map.css\";\nconst { kakao } = window;\nlet infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\nlet lat = 37.5642135;\nlet lon = 127.0016985;\nconst MapContainer = ({ searchPlace }) => {\n  const [gps, setGps] = useState([]);\n  const [map, setMap] = useState({});\n\n  function getGPS() {\n    const userLocation = [];\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        lat = position.coords.latitude; // 위도\n        lon = position.coords.longitude; // 경도\n        console.log(\"hi\");\n        const container = document.getElementById(\"map1\");\n        const options = {\n          center: new kakao.maps.LatLng(lat, lon),\n          level: 3,\n        };\n        console.log(options);\n        userLocation[0] = lat;\n        userLocation[1] = lon;\n        console.log(userLocation);\n        setGps(userLocation);\n\n        setMap(new kakao.maps.Map(container, options));\n      });\n    }\n  }\n\n  useEffect(() => {\n    getGPS();\n  }, []);\n  console.log(gps);\n\n  function placesSearchCB(data, status, pagination) {\n    if (status === kakao.maps.services.Status.OK) {\n      let bounds = new kakao.maps.LatLngBounds();\n\n      for (let i = 0; i < data.length; i++) {\n        displayMarker(data[i]);\n        bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\n      }\n\n      map.setBounds(bounds);\n    }\n  }\n\n  function displayMarker(place) {\n    let marker = new kakao.maps.Marker({\n      map: map,\n      position: new kakao.maps.LatLng(place.y, place.x),\n      image: new kakao.maps.MarkerImage(\n        \"https://cdn3.iconfinder.com/data/icons/flat-pro-basic-set-1-1/32/location-blue-256.png\",\n        new kakao.maps.Size(31, 35),\n        {\n          offset: new kakao.maps.Point(16, 34),\n          alt: \"마커 이미지\",\n        }\n      ),\n    });\n\n    kakao.maps.event.addListener(marker, \"mouseover\", function () {\n      // 마커를 클릭하면 장소명이 인포윈도우에 표출\n      infowindow.setContent(\n        '<div class=\"info\" >' +\n          \"   <h6>\" +\n          place.place_name +\n          \"</h6>\" +\n          \"    <span>\" +\n          place.road_address_name +\n          \"</span>\" +\n          \"</br>\" +\n          '   <span class=\"jibun gray\">' +\n          place.address_name +\n          \"</span>\" +\n          \"</br>\" +\n          '  <span class=\"tel\">' +\n          place.phone +\n          \"</span>\" +\n          \"</div>\"\n      );\n      infowindow.open(map, marker);\n    });\n    kakao.maps.event.addListener(marker, \"mouseout\", function () {\n      infowindow.close();\n    });\n  }\n\n  useEffect(() => {\n    if (gps != [] && map != {} && searchPlace) {\n      const ps = new kakao.maps.services.Places();\n      ps.keywordSearch(searchPlace, placesSearchCB, {\n        location: new kakao.maps.LatLng(gps[0], gps[1]),\n        bounds: new kakao.maps.LatLngBounds(\n          new kakao.maps.LatLng(gps[0] - 0.1, gps[1] - 0.1),\n          new kakao.maps.LatLng(gps[0] + 0.1, gps[1] + 0.1)\n        ),\n        radius: 10000,\n      });\n    }\n  }, [map, gps, searchPlace]);\n\n  return (\n    <div\n      id=\"map1\"\n      style={{\n        width: \"350px\",\n        height: \"350px\",\n      }}\n    ></div>\n  );\n};\n\nexport default MapContainer;\n"]},"metadata":{},"sourceType":"module"}